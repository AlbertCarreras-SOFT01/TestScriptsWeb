@page "/variables"

@using BlazorTable
@using System.ComponentModel
@using System.Security.Cryptography.X509Certificates
@using Newtonsoft.Json
@using TestScriptsWeb.Client
@inject AuscultacioApi api
@inject HttpClient client;
@if (Visible)
{
    @if (variables == null)
    {
    <TextEdit IsPlaintext="true" @bind-Text="@_missatge" />
    }
    else
    {
        <BlazorTable.Table TableItem="Variable" Items="variables" PageSize="25" ColumnReorder="true" TableRowClass="@(x => x.RowClass)" OnSelectedItem="@OnSelectedVariable">
            <BlazorTable.Column TableItem="Variable" Title="Id" Field="@(x => x.id)" Sortable="true" Filterable="true" Width="10%" />
            <BlazorTable.Column TableItem="Variable" Title="Codi" Field="@(x => x.codi)" Sortable="true" Filterable="true" Width="40%" />
            <BlazorTable.Column TableItem="Variable" Title="Id Projecte" Field="@(x => x.idProjecte)" Sortable="true" Filterable="true" Width="10%" />
            <Pager ShowPageNumber="true" ShowTotalCount="true" />
        </BlazorTable.Table>

    }
}

@code {

    Variable[] variables;
    string codi = "";

    [Parameter]
    public EventCallback<Variable> OnSelectedVariable { get; set; }

    [Parameter]
    public bool Visible { get; set; } = true;

    string _missatge { get; set; } = "Cagando...";

    protected override async Task OnInitializedAsync()
    {
        var missatge = await client.GetAsync(api._debugUri + "/Consulta_Variables");

        if (missatge.IsSuccessStatusCode)
        {
            var resposta = await missatge.Content.ReadAsStringAsync();

            variables = JsonConvert.DeserializeObject<Variable[]>(resposta);
        }
        else
        {
            _missatge = missatge.StatusCode.ToString();
        }
    }
}



