@page "/valors"

@using BlazorTable
@using Blazorise
@using Blazorise.DataGrid
@using System.ComponentModel
@using System.Security.Cryptography.X509Certificates
@using Newtonsoft.Json
@using TestScriptsWeb.Client
@inject HttpClient client;
@inject AuscultacioApi api;
@if (Visible)
{
    @if (_valors == null)
    {
        if (Variable.id >= 0)
        {
    <TextEdit IsPlaintext="true" @bind-Text="@_missatge" />
        }
        else
        {
            <p><em>Ninguna variable seleccionada</em></p>
        }
    }
    else
    {
        <input type="date" class="form-control form-control-sm" @bind-value="_data"/>
        <button @onclick="AsyncRecarrega">Recarrega</button>
        <BlazorTable.Table TableItem="Valor" Items="_valors" PageSize="15" ColumnReorder="true" TableRowClass="@(x => x.RowClass)" OnSelectedItem="@OnSelectedValor" MultiSelect="true">
            <BlazorTable.Column TableItem="Valor" Title="Id" Field="@(x => x.idValor)" Sortable="true" Filterable="true" Width="10%"/>
            <BlazorTable.Column TableItem="Valor" Title="DataHora" Field="@(x => x.dataHoraValor)" Sortable="true" Filterable="true" Width="10%"/>
            <BlazorTable.Column TableItem="Valor" Title="Valor" Field="@(x => x.valor)" Sortable="true" Filterable="true" Width="10%"/>
            <BlazorTable.Column TableItem="Valor" Title="Observacions" Field="@(x => x.observacions)" Sortable="true" Filterable="true" Width="20%"/>
            <BlazorTable.Column TableItem="Valor" Title="Estat" Field="@(x => x.tipusEstatValor)" Sortable="true" Filterable="true" Width="10%"/>
            <BlazorTable.Column TableItem="Valor" Title="Tipus" Field="@(x => x.tipusValor)" Sortable="true" Filterable="true" Width="10%"/>
            <Pager ShowPageNumber="true" ShowTotalCount="true"/>
        </BlazorTable.Table>
    }
}

@code {
    Valor[] _valors = null;

    DateTime _data = new DateTime(DateTime.Now.Year, 1, 1);

    DataGrid<Valor> _dataGrid;

    string _missatge { get; set; } = "Cagando...";

    [Parameter]
    public EventCallback<Valor> OnSelectedValor { get; set; }

    [Parameter]
    public bool Visible { get; set; } = true;

    [Parameter]
    public Variable Variable { get; set; }

    Variable _variableCarregada = new Variable()
    {
        id = -1
    };

    protected override async Task OnParametersSetAsync()
    {
        if (Visible && Variable.id != _variableCarregada.id)
        {
            _valors = null;

            var missatge = await client.GetAsync(api._debugUri + "/Consulta_Valors_Variable/" + Variable.id + "/" + _data.ToString("O"));

            if (missatge.IsSuccessStatusCode)
            {
                var resposta = await missatge.Content.ReadAsStringAsync();

                _valors = JsonConvert.DeserializeObject<Valor[]>(resposta);

                _variableCarregada = Variable;
            }
            else
            {
                _missatge = missatge.StatusCode.ToString();
            }
        }
    }

    async Task AsyncRecarrega()
    {
        _valors = null;

        var missatge = await client.GetAsync(api._debugUri + "/Consulta_Valors_Variable/" + Variable.id + "/" + _data.ToString("O"));

        if (missatge.IsSuccessStatusCode)
        {
            var resposta = await missatge.Content.ReadAsStringAsync();

            _valors = JsonConvert.DeserializeObject<Valor[]>(resposta);

            _variableCarregada = Variable;
        }
        else _missatge = missatge.StatusCode.ToString();
    }

}